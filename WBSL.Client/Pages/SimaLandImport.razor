@page "/simaland-import"
@using System.Text
@using System.Text.Json
@using Shared
@inject HttpClient Http
@inject IJSRuntime JS

<MudPaper Class="p-6 mx-auto mt-8" Style="max-width: 1600px;" Elevation="4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5">üì¶ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –°–∏–º–∞-–õ–µ–Ω–¥</MudText>
        <MudSelect T="ExternalAccount" @bind-Value="_selectedAccount" Label="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç" Variant="Variant.Outlined" FullWidth>
            @foreach (var account in _accounts){
                <MudSelectItem Value="@account">@account.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string" @bind-Value="_rawArticles" Label="–ê—Ä—Ç–∏–∫—É–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" Variant="Variant.Outlined" Lines="3" FullWidth/>

        <MudStack Row="true" Spacing="2">
            <MudButton OnClick="Fetch" Variant="Variant.Filled" Color="Color.Primary" Disabled="_selectedAccount == null">
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
            </MudButton>
            <MudButton OnClick="StoreToDatabase" Variant="Variant.Filled" Color="Color.Secondary">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="DownloadPhotosForAll">
                üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ
            </MudButton>
        </MudStack>
        <MudDivider/>
        <MudText Typo="Typo.h6">üíæ –≠–∫—Å–ø–æ—Ä—Ç</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Outlined" OnClick="DownloadJson">–°–∫–∞—á–∞—Ç—å JSON</MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="DownloadCsv">–°–∫–∞—á–∞—Ç—å CSV</MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="DownloadExcel">–°–∫–∞—á–∞—Ç—å Excel</MudButton>
        </MudStack>
        <MudText Typo="Typo.h6">üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Outlined" OnClick="TriggerFileUpload">–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏</MudButton>
            <input type="file" id="jsonFileInput" accept=".json" style="display:none" @onchange="OnJsonFileChanged"/>
        </MudStack>
        <MudDivider Class="my-4"/>
        @if (_products.Any()){
            <MudText Typo="Typo.h6">üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: @_products.Count</MudText>

            <MudTable Items="_products" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh Style="min-width: 100px;">–ê—Ä—Ç–∏–∫—É–ª</MudTh>
                    <MudTh>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</MudTh>
                    <MudTh>–ì–∞–±–∞—Ä–∏—Ç—ã (–®√ó–í√ó–ì)</MudTh>
                    <MudTh>–£–ø–∞–∫–æ–≤–∫–∞ (–î√ó–®√ó–í)</MudTh>
                    <MudTh Style="width: 250px;">–û–ø–∏—Å–∞–Ω–∏–µ</MudTh>
                    <MudTh Style="width: 300px;">–§–æ—Ç–æ</MudTh>
                    <MudTh>–ë–∞—Ä–∫–æ–¥—ã</MudTh>
                    <MudTh>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</MudTh>
                    <MudTh>–û—Å—Ç–∞—Ç–æ–∫</MudTh>
                    <MudTh>–ú–∏–Ω. –ø–∞—Ä—Ç–∏—è</MudTh>
                    <MudTh>–û–ø—Ç. —Ü–µ–Ω–∞</MudTh>
                    <MudTh>–†–æ–∑–Ω. —Ü–µ–Ω–∞</MudTh>
                    <MudTh>–ù–î–°</MudTh>
                    <MudTh>–¢–æ—Ä–≥–æ–≤–∞—è –ú–∞—Ä–∫–∞</MudTh>
                    <MudTh>–°—Ç—Ä–∞–Ω–∞</MudTh>
                    @foreach (var attrName in _dynamicAttrNames.OrderBy(n => n)){
                        <MudTh>@attrName</MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.sid</MudTd>
                    <MudTd>@context.name</MudTd>
                    <MudTd>@($"{Math.Max(context.width, 1)}√ó{Math.Max(context.height, 1)}√ó{Math.Max(context.depth, 1)}")</MudTd>
                    <MudTd>@($"{context.box_depth}√ó{context.box_width}√ó{context.box_height}")</MudTd>
                    <MudTd Style="max-height: 100px; overflow-y: auto;">
                        <MudText Class="line-clamp-2">@context.description</MudText>
                    </MudTd>

                    <MudTd>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() => DownloadPhotosForProduct(context.sid))">
                            üì• –§–æ—Ç–æ
                        </MudButton>
                    </MudTd>
                    <MudTd>@context.barcodes</MudTd>
                    <MudTd>@context.category_name</MudTd>
                    <MudTd>@context.balance</MudTd>
                    <MudTd>@context.qty_multiplier@context.unit_name</MudTd>
                    <MudTd>@context.wholesale_price</MudTd>
                    <MudTd>@context.price</MudTd>
                    <MudTd>@context.vat</MudTd>
                    <MudTd>@context.trademark_name</MudTd>
                    <MudTd>@context.country_name</MudTd>

                    @foreach (var attrName in _dynamicAttrNames.OrderBy(n => n)){
                        var attr = context.Attributes.FirstOrDefault(a => a.attr_name == attrName);
                        <MudTd>@(attr?.value_text ?? "")</MudTd>
                    }
                </RowTemplate>
            </MudTable>
        }
    </MudStack>
</MudPaper>
<style>
    .line-clamp-2 {
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
</style>

@code {
    private List<ExternalAccount> _accounts = new();
    private ExternalAccount? _selectedAccount;
    private string _rawArticles = string.Empty;
    private bool _initialized = false;
    private string _resultJson = string.Empty;
    private List<Product> _products = new();
    public List<ProductAttribute> Attributes{ get; set; } = new();
    private HashSet<string> _dynamicAttrNames = new();

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender && !_initialized){
            _initialized = true;
            await LoadAccounts();
            StateHasChanged();
        }
    }

    private async Task LoadAccounts(){
        _accounts = await Http.GetFromJsonAsync<List<ExternalAccount>>("api/accounts") ?? new List<ExternalAccount>();
    }

    private async Task Fetch(){
        if (_selectedAccount == null) return;
        var articles = _rawArticles.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(long.Parse)
            .ToList();
        var res = await Http.PostAsJsonAsync("api/simaland/fetch", new{
            AccountId = _selectedAccount.Id,
            Articles = articles
        });
        if (!res.IsSuccessStatusCode){
            _resultJson = $"–û—à–∏–±–∫–∞: {res.StatusCode}";
            return;
        }

        var json = await res.Content.ReadAsStringAsync();
        using var doc = JsonDocument.Parse(json);
        var root = doc.RootElement;
        if (!root.TryGetProperty("products", out var productArray)){
            _resultJson = "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏–∏ products";
            return;
        }

        _products.Clear();
        _dynamicAttrNames.Clear();
        foreach (var prodElem in productArray.EnumerateArray()){
            var product = JsonSerializer.Deserialize<Product>(prodElem.GetRawText(), new JsonSerializerOptions{
                PropertyNameCaseInsensitive = true
            });

            if (product == null)
                continue;
            product.Attributes = product.Attributes ?? new List<ProductAttribute>();
            if (prodElem.TryGetProperty("attrs", out var attrsArray) && attrsArray.ValueKind == JsonValueKind.Array){
                foreach (var attr in attrsArray.EnumerateArray()){
                    var attrId = attr.TryGetProperty("attr_id", out var idProp) ? idProp.GetInt32() : 0;
                    var attrName = attr.TryGetProperty("attr_name", out var an) ? an.GetString() ?? "" : "";
                    var value = attr.TryGetProperty("value", out var v) ? v.ToString() ?? "" : "";

                    if (!string.IsNullOrWhiteSpace(attrName)){
                        product.Attributes.Add(new ProductAttribute{
                            product_sid = product.sid,
                            attr_name = attrName,
                            value_type = "text",
                            value_text = value
                        });

                        _dynamicAttrNames.Add(attrName);
                    }
                }
            }

            _products.Add(product);
        }

        _resultJson = $"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {_products.Count}, –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {_dynamicAttrNames.Count}";
        StateHasChanged();
    }

    private async Task DownloadPhotosForProduct(long sid){
        var product = _products.FirstOrDefault(p => p.sid == sid);
        if (product is null){
            _resultJson = $"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {sid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/simaland/download-photos", new List<Product>{ product });
        _resultJson = response.IsSuccessStatusCode
            ? $"–§–æ—Ç–æ –∞—Ä—Ç–∏–∫—É–ª–∞ {sid} —Å–∫–∞—á–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ."
            : $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ –∞—Ä—Ç–∏–∫—É–ª–∞ {sid}: {response.StatusCode}";
    }

    private async Task DownloadPhotosForAll(){
        if (!_products.Any()){
            _resultJson = "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.";
            return;
        }

        var response = await Http.PostAsJsonAsync("api/simaland/download-photos", _products);
        _resultJson = response.IsSuccessStatusCode
            ? "–§–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–∫–∞—á–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ."
            : $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {response.StatusCode}";
    }


    private async Task DownloadExcel(){
        var articles = _rawArticles.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(long.Parse)
            .ToList();
        var request = new HttpRequestMessage(HttpMethod.Post, "api/simaland/export-excel"){
            Content = JsonContent.Create(new{
                AccountId = _selectedAccount!.Id,
                Articles = articles
            })
        };
        var response = await Http.SendAsync(request);
        if (!response.IsSuccessStatusCode){
            _resultJson = $"–û—à–∏–±–∫–∞: {response.StatusCode}";
            return;
        }

        var data = await response.Content.ReadAsByteArrayAsync();
        var base64 = Convert.ToBase64String(data);
        await JS.InvokeVoidAsync("downloadFileFromBlazor", "simaland-products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64);
    }

    private async Task DownloadJson(){
        var json = JsonSerializer.Serialize(
            _products,
            new JsonSerializerOptions{
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            });
        await DownloadFile("products.json", "application/json", json);
    }

    private async Task DownloadCsv(){
        var csv = new StringBuilder();

        var headers = new List<string>{
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ì–∞–±–∞—Ä–∏—Ç—ã", "–£–ø–∞–∫–æ–≤–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            "–û–ø—Ç–¶–µ–Ω–∞", "–†–æ–∑–Ω–¶–µ–Ω–∞", "–ù–î–°", "–¢–æ—Ä–≥–æ–≤–∞—è–ú–∞—Ä–∫–∞", "–°—Ç—Ä–∞–Ω–∞", "–§–æ—Ç–æ"
        };

        headers.AddRange(_dynamicAttrNames.OrderBy(n => n));

        csv.AppendLine(string.Join(",", headers));

        foreach (var p in _products){
            var row = new List<string>{
                p.sid.ToString(),
                Escape(p.name),
                Escape(p.description),
                $"{p.width}√ó{p.height}√ó{p.depth}",
                $"{p.box_depth}√ó{p.box_width}√ó{p.box_height}",
                Escape(p.category_name),
                p.wholesale_price.ToString("0.##"),
                p.price.ToString("0.##"),
                p.vat?.ToString() ?? "",
                Escape(p.trademark_name),
                Escape(p.country_name),
                Escape(string.Join(" | ", p.photo_urls ?? new()))
            };

            foreach (var attrName in _dynamicAttrNames.OrderBy(n => n)){
                var attr = p.Attributes.FirstOrDefault(a => a.attr_name == attrName);
                row.Add(Escape(attr?.value_text));
            }

            csv.AppendLine(string.Join(",", row));
        }

        await DownloadFile("products.csv", "text/csv", csv.ToString());
    }

    private static string Escape(string? input){
        if (string.IsNullOrWhiteSpace(input))
            return "";

        var escaped = input.Replace("\"", "\"\"");
        return $"\"{escaped}\"";
    }

    private async Task DownloadFile(string filename, string contentType, string content){
        var byteArray = System.Text.Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(byteArray);

        await JS.InvokeVoidAsync("downloadFileFromBlazor", filename, contentType, base64);
    }

    private async Task TriggerFileUpload(){
        await JS.InvokeVoidAsync("triggerFileInputClick", "jsonFileInput");
    }

    private async Task OnJsonFileChanged(ChangeEventArgs _){
        try{
            var jsonText = await JS.InvokeAsync<string>("readUploadedJson", "jsonFileInput");
            if (!string.IsNullOrWhiteSpace(jsonText)){
                var articles = JsonSerializer.Deserialize<List<long>>(jsonText);
                if (articles != null && articles.Count > 0){
                    _rawArticles = string.Join(", ", articles);
                }
                else{
                    _resultJson = "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.";
                }
            }
        }
        catch (Exception ex){
            _resultJson = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}";
        }
    }

    private async Task StoreToDatabase(){
        var attributes = _products.SelectMany(p => p.Attributes.Select(attr => new ProductAttribute{
            product_sid = p.sid,
            attr_name = attr.attr_name,
            value_type = attr.value_type,
            value_text = attr.value_text
        })).ToList();

        var res = await Http.PostAsJsonAsync("api/simaland/store", new{
            products = _products,
            attributes
        });

        if (res.IsSuccessStatusCode){
            _resultJson = "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑—É!";
        }
        else{
            _resultJson = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {res.StatusCode}";
        }
    }

    public class FetchResponse
    {
        public List<Product> Products{ get; set; } = new();
        public List<ProductAttribute> Attributes{ get; set; } = new();
    }

    public class Product
    {
        public long sid{ get; set; }
        public string name{ get; set; } = "";
        public string color{ get; set; } = "";
        public string description{ get; set; } = "";
        public decimal width{ get; set; }
        public decimal height{ get; set; }
        public decimal depth{ get; set; }
        public decimal weight{ get; set; }
        public decimal box_depth{ get; set; }
        public decimal box_height{ get; set; }
        public decimal box_width{ get; set; }
        public string base_photo_url{ get; set; } = "";
        public int category_id{ get; set; }
        public int? balance{ get; set; }
        public int qty_multiplier{ get; set; }
        public decimal wholesale_price{ get; set; }
        public decimal price{ get; set; }
        public string category_name{ get; set; } = "";
        public List<string> photo_urls{ get; set; } = new();
        public string? barcodes{ get; set; }
        public int? vat{ get; set; }
        public string? trademark_name{ get; set; }
        public string? country_name{ get; set; }
        public string? unit_name{ get; set; }
        public List<ProductAttribute> Attributes{ get; set; } = new();
    }

    public class ProductAttribute
    {
        public long product_sid{ get; set; }
        public string attr_name{ get; set; } = "";
        public string value_type{ get; set; } = "text";
        public string? value_text{ get; set; }
    }

}
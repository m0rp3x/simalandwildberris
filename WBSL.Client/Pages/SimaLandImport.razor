@page "/simaland-import"
@using System.Text
@using System.Text.Json
@using Shared
@inject HttpClient Http
@inject IJSRuntime JS


<MudPaper Class="pa-6 mx-auto mt-8" Style="max-width: 1920px;" Elevation="4">
    <MudText Typo="Typo.h5">Импорт товаров из Сима-Ленд</MudText>

    <MudSelect T="ExternalAccount" @bind-Value="_selectedAccount" Label="Выберите аккаунт" Variant="Variant.Outlined" FullWidth>
        @foreach (var account in _accounts){
            <MudSelectItem Value="@account">@account.Name</MudSelectItem>
        }
    </MudSelect>

    <MudTextField T="string" @bind-Value="_rawArticles" Label="Артикулы (через запятую)" Variant="Variant.Outlined" Lines="3" FullWidth/>

    <MudButton OnClick="Fetch" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" Disabled="_selectedAccount == null">Загрузить товары</MudButton>
    <MudStack Row="true" Class="mt-4" Spacing="2">
        <MudButton Variant="Variant.Outlined" OnClick="DownloadJson">Скачать JSON</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="DownloadCsv">Скачать CSV</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="DownloadExcel">Скачать Excel</MudButton>
    </MudStack>
    <MudStack Row="true" Spacing="2" Class="mt-2">
        <MudButton Variant="Variant.Outlined" OnClick="TriggerFileUpload">
            Загрузить JSON с артикулами
        </MudButton>
        <input type="file" id="jsonFileInput" accept=".json" style="display:none" @onchange="OnJsonFileChanged"/>
    </MudStack>
    <MudButton Variant="Variant.Outlined" OnClick="StoreToDatabase">
        Загрузить в базу
    </MudButton>


    <MudDivider Class="my-4"/>

    @if (_products.Any()){
        <div style="margin: 16px; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
            <MudTable Items="_products" Hover="true" Dense="true" Bordered="true" Elevation="0"
                      Style="width: auto; min-width: 100%;">
                <HeaderContent>
                    <MudTh Style="width: 80px; min-width: 80px;">Артикул</MudTh>
                    <MudTh Style="width: 150px; min-width: 150px;">Наименование</MudTh>
                    <MudTh Style="width: 90px; min-width: 90px;">Габариты</MudTh>
                    <MudTh Style="width: 90px; min-width: 90px;">Упаковка</MudTh>
                    <MudTh Style="width: 200px; min-width: 200px;">Описание</MudTh>
                    <MudTh Style="width: 60px; min-width: 60px;">Вес</MudTh>
                    <MudTh Style="width: 120px; min-width: 120px;">Фото</MudTh>
                    <MudTh Style="width: 100px; min-width: 100px;">Баркоды</MudTh>
                    <MudTh Style="width: 120px; min-width: 120px;">Категория</MudTh>
                    <MudTh Style="width: 70px; min-width: 70px;">Остаток</MudTh>
                    <MudTh Style="width: 70px; min-width: 70px;">Мин.партия</MudTh>
                    <MudTh Style="width: 80px; min-width: 80px;">Опт.цена</MudTh>
                    <MudTh Style="width: 80px; min-width: 80px;">Розн.цена</MudTh>
                    <MudTh Style="width: 60px; min-width: 60px;">НДС</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Артикул">
                        <MudText Title="@context.sid" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@context.sid</MudText>
                    </MudTd>
                    <MudTd DataLabel="Наименование">
                        <MudText Title="@context.name" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@context.name</MudText>
                    </MudTd>
                    <MudTd DataLabel="Габариты" Title="@($"{Math.Max(context.width, 1)}×{Math.Max(context.height, 1)}×{Math.Max(context.depth, 1)}")">
                        <MudText Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@($"{Math.Max(context.width, 1)}×{Math.Max(context.height, 1)}×{Math.Max(context.depth, 1)}")</MudText>
                    </MudTd>
                    <MudTd DataLabel="Упаковка" Title="@($"{context.box_depth}×{context.box_width}×{context.box_height}")">
                        <MudText Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@($"{context.box_depth}×{context.box_width}×{context.box_height}")</MudText>
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudText Title="@context.description" Style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; line-height: 1.2em; max-height: 2.4em;">
                            @context.description
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Вес">@context.weight</MudTd>
                    <MudTd DataLabel="Фото" Style="max-width: 200px; padding: 0;">
                        <div style="max-height: 120px; overflow-y: auto; padding: 8px;">
                            @foreach (var url in context.photo_urls){
                                <div style="margin-bottom: 4px;">
                                    <a href="@url"
                                       target="_blank"
                                       title="@url"
                                       style="color: var(--mud-palette-primary); 
                                       -webkit-line-clamp: 2;
                                       -webkit-box-orient: vertical;
                                       overflow: hidden;
                                       text-overflow: ellipsis;
                          text-decoration: underline; 
                          word-break: break-all;
                          display: inline-block;
                          max-width: 100%;
                          padding: 2px 0;">
                                        @url
                                    </a>
                                </div>
                            }
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Баркоды">
                        <MudText Title="@context.barcodes" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@context.barcodes</MudText>
                    </MudTd>
                    <MudTd DataLabel="Категория">
                        <MudText Title="@context.category_name" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@context.category_name</MudText>
                    </MudTd>
                    <MudTd DataLabel="Остаток">@context.balance</MudTd>
                    <MudTd DataLabel="Мин.партия">@context.qty_multiplier</MudTd>
                    <MudTd DataLabel="Опт.цена">@context.wholesale_price.ToString("N2")</MudTd>
                    <MudTd DataLabel="Розн.цена">@context.price.ToString("N2")</MudTd>
                    <MudTd DataLabel="НДС">@context.vat</MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    }
</MudPaper>

@code {
    private List<ExternalAccount> _accounts = new();
    private ExternalAccount? _selectedAccount;
    private string _rawArticles = string.Empty;
    private bool _initialized = false;
    private string _resultJson = string.Empty;
    private List<SimalandProduct> _products = new();

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender && !_initialized){
            _initialized = true;
            await LoadAccounts();
            StateHasChanged();
        }
    }

    private async Task LoadAccounts(){
        _accounts = await Http.GetFromJsonAsync<List<ExternalAccount>>("api/accounts") ?? new List<ExternalAccount>();
    }

    private async Task Fetch(){
        if (_selectedAccount == null) return;

        var articles = _rawArticles.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(long.Parse)
            .ToList();


        var res = await Http.PostAsJsonAsync("api/simaland/fetch", new{
            AccountId = _selectedAccount.Id,
            Articles = articles
        });

        if (res.IsSuccessStatusCode){
            var json = await res.Content.ReadAsStringAsync();
            _products = JsonSerializer.Deserialize<List<SimalandProduct>>(json, new JsonSerializerOptions{
                PropertyNameCaseInsensitive = true
            }) ?? new List<SimalandProduct>();
        }
    }

    private async Task DownloadExcel(){
        var articles = _rawArticles.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(long.Parse)
            .ToList();

        var request = new HttpRequestMessage(HttpMethod.Post, "api/simaland/export-excel"){
            Content = JsonContent.Create(new{
                AccountId = _selectedAccount!.Id,
                Articles = articles
            })
        };

        var response = await Http.SendAsync(request);
        if (!response.IsSuccessStatusCode){
            _resultJson = $"Ошибка: {response.StatusCode}";
            return;
        }

        var data = await response.Content.ReadAsByteArrayAsync();
        var base64 = Convert.ToBase64String(data);

        await JS.InvokeVoidAsync("downloadFileFromBlazor", "simaland-products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64);
    }


    private async Task DownloadJson(){
        var json = JsonSerializer.Serialize(
            _products,
            new JsonSerializerOptions{
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            });

        await DownloadFile("products.json", "application/json", json);
    }


    private async Task DownloadCsv(){
        var csv = new StringBuilder();
        csv.AppendLine("Артикул,Наименование,Описание,Ширина,Высота,Глубина,Вес,Фото,Категория,Остаток,МинПартия,ОптЦена,РознЦена");

        foreach (var p in _products){
            csv.AppendLine($"{p.sid},\"{p.name}\",\"{p.description}\",{p.width},{p.height},{p.depth},{p.weight},{p.base_photo_url},{p.category_id},{p.balance},{p.qty_multiplier},{p.wholesale_price},{p.price}");
        }

        await DownloadFile("products.csv", "text/csv", csv.ToString());
    }

    private async Task DownloadFile(string filename, string contentType, string content){
        var byteArray = System.Text.Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(byteArray);

        await JS.InvokeVoidAsync("downloadFileFromBlazor", filename, contentType, base64);
    }

    private async Task TriggerFileUpload(){
        await JS.InvokeVoidAsync("triggerFileInputClick", "jsonFileInput");
    }

    private async Task OnJsonFileChanged(ChangeEventArgs _){
        try{
// вызываем JS, чтобы прочитать содержимое файла
            var jsonText = await JS.InvokeAsync<string>("readUploadedJson", "jsonFileInput");

            if (!string.IsNullOrWhiteSpace(jsonText)){
                var articles = JsonSerializer.Deserialize<List<long>>(jsonText);
                if (articles != null && articles.Count > 0){
                    _rawArticles = string.Join(", ", articles);
                }
                else{
                    _resultJson = "Файл пуст или формат неверный.";
                }
            }
        }
        catch (Exception ex){
            _resultJson = $"Ошибка при чтении файла: {ex.Message}";
        }
    }

    private async Task StoreToDatabase(){
        var res = await Http.PostAsJsonAsync("api/simaland/store", _products);
        if (res.IsSuccessStatusCode){
            _resultJson = "Успешно загружено в базу!";
        }
        else{
            _resultJson = $"Ошибка загрузки: {res.StatusCode}";
        }
    }


    public class ExternalAccount
    {
        public int Id{ get; set; }
        public string Platform{ get; set; } = "";
        public string Name{ get; set; } = "";
    }

}
@page "/simaland-import"
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Shared
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudPaper Class="p-6 mx-auto mt-8" Style="max-width: 1600px;" Elevation="4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5">üì¶ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –°–∏–º–∞-–õ–µ–Ω–¥</MudText>
        <MudSelect T="ExternalAccount" @bind-Value="_selectedAccount" Label="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç" Variant="Variant.Outlined" FullWidth>
            @foreach (var account in _accounts)
            {
            <MudSelectItem Value="@account">@account.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string" @bind-Value="_rawArticles" Label="–ê—Ä—Ç–∏–∫—É–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" Variant="Variant.Outlined" Lines="3" FullWidth/>

        <MudStack Row="true" Spacing="2">
            <MudButton OnClick="StartFetch" Variant="Variant.Filled" Color="Color.Primary" Disabled="_selectedAccount == null">
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
            </MudButton>
            <MudButton OnClick="StoreToDatabase" Variant="Variant.Filled" Color="Color.Secondary">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="DownloadPhotosForAll">
                üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ
            </MudButton>
        </MudStack>

        <MudDivider/>
        <MudText Typo="Typo.h6">üìé –≠–∫—Å–ø–æ—Ä—Ç</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Outlined" OnClick="DownloadJson">–°–∫–∞—á–∞—Ç—å JSON</MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="DownloadCsv">–°–∫–∞—á–∞—Ç—å CSV</MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="DownloadExcel">–°–∫–∞—á–∞—Ç—å Excel</MudButton>
        </MudStack>
        <MudText Typo="Typo.h6">üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Outlined" OnClick="TriggerFileUpload">–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏</MudButton>
            <input type="file" id="jsonFileInput" accept=".json" style="display:none" @onchange="OnJsonFileChanged"/>
        </MudStack>
        <MudDivider Class="my-4"/>

        @if (_currentJob != null)
        {
        <MudProgressLinear Value="@((_total>0) ? (_processed/(double)_total*100) : 0)"
        BufferValue="100" Height="20" Rounded="true" Class="my-4"/>
        <MudText Typo="Typo.subtitle1">@_processed / @_total</MudText>
        }
      

                else if (_currentJob == null && _loadingProgress > 0 && _loadingProgress < 100)
        {
        <MudProgressLinear Color="Color.Primary" Value="@_loadingProgress"
        BufferValue="100" Height="20" Rounded="true" Class="my-4"/>
        <MudText Typo="Typo.subtitle1">–ó–∞–≥—Ä—É–∑–∫–∞... @_loadingProgress%</MudText>
        }
        else if (_products.Any())
        {
        <MudText Typo="Typo.h6">üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: @_products.Count</MudText>
        }

    </MudStack>
</MudPaper>
<style>
    .line-clamp-2 {
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
</style>


@code {
    private List<ExternalAccount> _accounts = new();
    private ExternalAccount? _selectedAccount;
    private string _rawArticles = string.Empty;
    private bool _initialized = false;
    private string _resultJson = string.Empty;
    private List<Product> _products = new();
    public List<ProductAttribute> Attributes{ get; set; } = new();
    private HashSet<string> _dynamicAttrNames = new();
    private List<string> _allAttrNames = new();
    private int _loadingProgress = 0;   
    Guid? _currentJob;
    int _total, _processed;
    string _status = "";
    private List<ProductAttribute> _attributes = new();


    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender && !_initialized){
            _initialized = true;
            await LoadAccounts();
            StateHasChanged();
        }
    }

    private async Task LoadAccounts(){
        _accounts = await Http.GetFromJsonAsync<List<ExternalAccount>>("api/accounts") ?? new List<ExternalAccount>();
    }






    private async Task DownloadPhotosForAll()
    {
        if (!_products.Any())
        {
            Snackbar.Add("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", Severity.Warning);
            return;
        }

        Snackbar.Add("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ...", Severity.Info);

        var response = await Http.PostAsJsonAsync("api/simaland/download-photos", _products);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("‚úÖ –í—Å–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã!", Severity.Success);
        }
        else
        {
            Snackbar.Add($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {response.StatusCode}", Severity.Error);
        }
    }

    private async Task DownloadPhotosForProduct(long sid)
    {
        var product = _products.FirstOrDefault(p => p.sid == sid);
        if (product is null)
        {
            Snackbar.Add($"‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {sid} –Ω–µ –Ω–∞–π–¥–µ–Ω.", Severity.Warning);
            return;
        }

        Snackbar.Add($"‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {sid}...", Severity.Info);

        var response = await Http.PostAsJsonAsync("api/simaland/download-photos", new List<Product> { product });

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"‚úÖ –§–æ—Ç–æ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {sid} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã!", Severity.Success);
        }
        else
        {
            Snackbar.Add($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ –∞—Ä—Ç–∏–∫—É–ª–∞ {sid}: {response.StatusCode}", Severity.Error);
        }
    }



    private async Task DownloadExcel()
    {
        var exportData = _products.Select(p =>
        {
            var dict = new Dictionary<string, object?>
            {
                ["–ê—Ä—Ç–∏–∫—É–ª"] = p.sid,
                ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] = p.name,
                ["–û–ø–∏—Å–∞–Ω–∏–µ"] = p.description,
                ["–®√ó–í√ó–ì"] = $"{p.width}√ó{p.height}√ó{p.depth}",
                ["–£–ø–∞–∫–æ–≤–∫–∞"] = $"{p.box_depth}√ó{p.box_width}√ó{p.box_height}",
                ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = p.category_name,
                ["–û–ø—Ç. —Ü–µ–Ω–∞"] = p.wholesale_price,
                ["–†–æ–∑–Ω. —Ü–µ–Ω–∞"] = p.price,
                ["–ù–î–°"] = p.vat,
                ["–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞"] = p.trademark_name,
                ["–°—Ç—Ä–∞–Ω–∞"] = p.country_name,
                ["–§–æ—Ç–æ"] = string.Join(" | ", p.photo_urls ?? new())
            };

            foreach (var attr in p.Attributes)
            {
                if (!string.IsNullOrWhiteSpace(attr.attr_name))
                    dict[attr.attr_name] = attr.value_text;
            }

            return dict;
        }).ToList();

        var response = await Http.PostAsJsonAsync("api/simaland/export-excel", exportData);
        if (!response.IsSuccessStatusCode)
        {
            _resultJson = $"–û—à–∏–±–∫–∞: {response.StatusCode}";
            return;
        }

        var data = await response.Content.ReadAsByteArrayAsync();
        var base64 = Convert.ToBase64String(data);
        await JS.InvokeVoidAsync("downloadFileFromBlazor", "simaland-products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", base64);
    }


    private async Task DownloadJson(){
        var json = JsonSerializer.Serialize(
            _products,
            new JsonSerializerOptions{
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            });
        await DownloadFile("products.json", "application/json", json);
    }

    private async Task DownloadCsv(){
        var csv = new StringBuilder();

        var headers = new List<string>{
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ì–∞–±–∞—Ä–∏—Ç—ã", "–£–ø–∞–∫–æ–≤–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            "–û–ø—Ç–¶–µ–Ω–∞", "–†–æ–∑–Ω–¶–µ–Ω–∞", "–ù–î–°", "–¢–æ—Ä–≥–æ–≤–∞—è–ú–∞—Ä–∫–∞", "–°—Ç—Ä–∞–Ω–∞", "–§–æ—Ç–æ"
        };

        headers.AddRange(_dynamicAttrNames.OrderBy(n => n));

        csv.AppendLine(string.Join(",", headers));

        foreach (var p in _products){
            var row = new List<string>{
                p.sid.ToString(),
                Escape(p.name),
                Escape(p.description),
                $"{p.width}√ó{p.height}√ó{p.depth}",
                $"{p.box_depth}√ó{p.box_width}√ó{p.box_height}",
                Escape(p.category_name),
                p.wholesale_price.ToString("0.##"),
                p.price.ToString("0.##"),
                p.vat?.ToString() ?? "",
                Escape(p.trademark_name),
                Escape(p.country_name),
                Escape(string.Join(" | ", p.photo_urls ?? new()))
            };

            foreach (var attrName in _dynamicAttrNames.OrderBy(n => n)){
                var attr = p.Attributes.FirstOrDefault(a => a.attr_name == attrName);
                row.Add(Escape(attr?.value_text));
            }

            csv.AppendLine(string.Join(",", row));
        }

        await DownloadFile("products.csv", "text/csv", csv.ToString());
    }

    private static string Escape(string? input){
        if (string.IsNullOrWhiteSpace(input))
            return "";

        var escaped = input.Replace("\"", "\"\"");
        return $"\"{escaped}\"";
    }

    private async Task DownloadFile(string filename, string contentType, string content){
        var byteArray = System.Text.Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(byteArray);

        await JS.InvokeVoidAsync("downloadFileFromBlazor", filename, contentType, base64);
    }

    private async Task TriggerFileUpload(){
        await JS.InvokeVoidAsync("triggerFileInputClick", "jsonFileInput");
    }

    private async Task OnJsonFileChanged(ChangeEventArgs _){
        try{
            var jsonText = await JS.InvokeAsync<string>("readUploadedJson", "jsonFileInput");
            if (!string.IsNullOrWhiteSpace(jsonText)){
                var articles = JsonSerializer.Deserialize<List<long>>(jsonText);
                if (articles != null && articles.Count > 0){
                    _rawArticles = string.Join(", ", articles);
                }
                else{
                    _resultJson = "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.";
                }
            }
        }
        catch (Exception ex){
            _resultJson = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}";
        }
    }

    private async Task StoreToDatabase()
    {
        var flattenedAttributes = _products
            .SelectMany(p => p.Attributes)
            .Select(a => new ProductAttribute
            {
                product_sid = a.product_sid,
                attr_name   = a.attr_name,
                value_type  = a.value_type,
                value_text  = a.value_text
            })
            .ToList();

        var storeRequest = new ResultDto
        {
            products   = _products,
            attributes = flattenedAttributes
        };

        Snackbar.Add("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É...", Severity.Info);

        var res = await Http.PostAsJsonAsync("api/simaland/store", storeRequest);

        if (res.IsSuccessStatusCode)
        {
            Snackbar.Add("‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", Severity.Success);
        }
        else
        {
            Snackbar.Add($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É: {res.StatusCode}", Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

    
    async Task StartFetch()
    {
        var articleIds = _rawArticles.Split(',')
            .Select(article => TryParseLong(article, out var result) ? result : (long?)null)
            .Where(id => id.HasValue)  // –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã
            .Select(id => id.Value)    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ Nullable<long> –≤ –æ–±—ã—á–Ω—ã–π long
            .ToList();

        var successfullyParsedCount = articleIds.Count;
        var failedCount = _rawArticles.Split(',').Length - successfullyParsedCount;

        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        var req = new { AccountId = _selectedAccount!.Id, Articles = articleIds };
        var resp = await Http.PostAsJsonAsync("api/simaland/fetch-job", req);
        resp.EnsureSuccessStatusCode();
        var data = await resp.Content.ReadFromJsonAsync<FetchJobDto>();
        _currentJob = data?.jobid;
        
        Snackbar.Add($"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {successfullyParsedCount} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É: {failedCount}", Severity.Info);

        _ = PollProgress();
    }

    private bool TryParseLong(string value, out long result)
    {
        return long.TryParse(value, out result);
    }
    
    async Task PollProgress()
    {
        if (_currentJob == null) return;

        // 1) –æ–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        while (true)
        {
            var prog = await Http.GetFromJsonAsync<ProgressDto>($"api/simaland/fetch-progress/{_currentJob}");
            if (prog == null) break;

            _total     = prog.total;
            _processed = prog.processed;
            _status    = prog.status;
            await InvokeAsync(StateHasChanged);

            if (!string.Equals(_status, "Running", StringComparison.OrdinalIgnoreCase))
                break;

            await Task.Delay(500);
        }

        // 2) –∫–æ–≥–¥–∞ job –∑–∞–≤–µ—Ä—à—ë–Ω, –∑–∞–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (string.Equals(_status, "Completed", StringComparison.OrdinalIgnoreCase))
        {
            var res = await Http.GetFromJsonAsync<ResultDto>($"api/simaland/fetch-result/{_currentJob}");
            if (res != null)
            {
                // –∑–∞–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                _products   = res.products;
                // –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è Attributes
                foreach (var p in _products)
                    p.Attributes = new List<ProductAttribute>();

                // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                foreach (var attr in res.attributes)
                {
                    var parent = _products.FirstOrDefault(x => x.sid == attr.product_sid);
                    if (parent != null)
                        parent.Attributes.Add(attr);
                }
            }

            _loadingProgress = 100;
            await InvokeAsync(StateHasChanged);
        }
    }

    


    public class Product
    {
        public long sid{ get; set; }
        public string name{ get; set; } = "";
        public string color{ get; set; } = "";
        public string description{ get; set; } = "";
        public decimal width{ get; set; }
        public decimal height{ get; set; }
        public decimal depth{ get; set; }
        public decimal weight{ get; set; }
        public decimal box_depth{ get; set; }
        public decimal box_height{ get; set; }
        public decimal box_width{ get; set; }
        public string base_photo_url{ get; set; } = "";
        public int category_id{ get; set; }
        public int? balance{ get; set; }
        public int qty_multiplier{ get; set; }
        public decimal wholesale_price{ get; set; }
        public decimal price{ get; set; }
        public string category_name{ get; set; } = "";
        public List<string> photo_urls{ get; set; } = new();
        public string? barcodes{ get; set; }
        public int? vat{ get; set; }
        public string? trademark_name{ get; set; }
        public string? country_name{ get; set; }
        public string? unit_name{ get; set; }
        public List<ProductAttribute> Attributes{ get; set; } = new();
    }
 
    
    public class FetchJobDto { public Guid jobid { get; set; } }
    public class ProgressDto
    {
        public int total { get; set; }

        public int processed { get; set; }

        public string status { get; set; } = "";
    }    
    public class ResultDto { public List<Product> products { get; set; } = new(); public List<ProductAttribute> attributes { get; set; } = new(); }

    public class ProductAttribute
    {
        // –ì–æ–≤–æ—Ä–∏–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—É: JSON-–ø–æ–ª–µ "product_s" ‚Üí —ç—Ç–æ product_sid
        [JsonPropertyName("product_s")]
        public long product_sid { get; set; }

        [JsonPropertyName("attr_name")]
        public string attr_name   { get; set; } = "";
        [JsonPropertyName("value_type")]
        public string value_type  { get; set; } = "text";
        [JsonPropertyName("value_text")]
        public string? value_text { get; set; }
    }

}
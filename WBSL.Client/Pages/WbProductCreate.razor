@page "/wb-product"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Text.Json
@using Shared
@using Shared.Enums
@using Shared.FieldInfos
@using WBSL.Client.Data.Helpers
@using WBSL.Client.Data.Services
@inject ISnackbar Snackbar
@inject WbProductService ProductService
@inject HttpClient Client
@inject IJSRuntime JS

<MudPaper Class="pa-6 mx-auto mt-8" Elevation="4">

    <MudText Typo="Typo.h5" Class="mb-4">Создание товаров Wildberries</MudText>
    @if (LastWbResult?.AdditionalErrors != null){
        <MudButton OnClick="CopyErrorToClipboard" Variant="Variant.Outlined" Color="Color.Secondary" Class="mb-2">
            Скопировать JSON ошибки
        </MudButton>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Детали ошибок">
                @foreach (var err in LastWbResult.AdditionalErrors){
                    <MudText Color="Color.Error">
                        <b>@err.Key:</b> @string.Join(", ", err.Value)
                    </MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    }

    <MudSelect T="ExternalAccount" Label="Аккаунт Wildberries" @bind-Value="SelectedWbAccount" FullWidth>
        @foreach (var acc in _accounts.Where(x => x.Platform == ExternalAccountType.Wildberries.ToString())){
            <MudSelectItem Value="@acc">@acc.Name</MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="ExternalAccount" Label="Аккаунт SimaLand" @bind-Value="SelectedSimaAccount" FullWidth>
        @foreach (var acc in _accounts.Where(x => x.Platform == ExternalAccountType.SimaLand.ToString())){
            <MudSelectItem Value="@acc">@acc.Name</MudSelectItem>
        }
    </MudSelect>

    <MudDivider Class="my-6"/>
    <MudText Typo="Typo.h6">Выбор категории</MudText>

    <MudAutocomplete T="WbCategoryDto"
                     Label="Родительская категория"
                     SearchFunc="(q, t) => SearchBaseCategories(q, t)"
                     ToStringFunc="x => x?.Name"
                     MinCharacters="0"
                     MaxItems="100"
                     Immediate="true"
                     @bind-Value="SelectedBaseCategory"
                     Dense="true"
                     Class="mt-2"/>

    <MudAutocomplete T="WbCategoryDto"
                     Label="Дочерняя категория"
                     SearchFunc="(q, t) => SearchChildCategories(q, t)"
                     ToStringFunc="x => x?.Name"
                     MaxItems="50"
                     MinCharacters="0"
                     Immediate="true"
                     Value="SelectedChildCategory"
                     Dense="true"
                     Disabled="@(SelectedBaseCategory is null)"
                     ValueChanged="OnCategorySelected"
                     Class="mt-2"/>

    <MudButton OnClick="CheckCategoryMapping" Disabled="@(!CanSearch)" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
        Проверить
    </MudButton>

    @if (_checkPerformed){
        <MudDivider Class="my-6"/>
        <MudText Typo="Typo.h6">Предложенная характеристика из SimaLand</MudText>

        <MudAutocomplete T="string"
                         Label="Характеристика SimaLand"
                         Value="SelectedSimalandAttribute"
                         ValueChanged="val => SelectedSimalandAttribute = val"
                         SearchFunc="SearchSimalandCategories"
                         ToStringFunc="x => x"
                         MinCharacters="1"
                         Class="mt-2"
                         FullWidth="true"/>

        <MudDivider Class="my-6"/>
        <MudText Typo="Typo.h6">Информация о товаре</MudText>

        <MudSimpleTable>
            <MudTh>Поле Wildberries</MudTh>
            <MudTh>Источник SimaLand</MudTh>

            @foreach (var group in Mappings.GroupBy(m => m.Type)){
                <MudTr>
                    <MudTd ColSpan="2">
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary">
                            @GetGroupHeader(group.Key)
                        </MudText>
                    </MudTd>
                </MudTr>

                @foreach (var context in group){
                    <MudTr>
                        <MudTd>@context.DisplayName</MudTd>
                        <MudTd>
                            <MudSelect T="string"
                                       Value="@context.SourceProperty"
                                       ValueChanged="val => OnMappingChanged(context, val)">
                                <MudSelectItem Value="@("__null__")">– не выбрано –</MudSelectItem>
                                @if (context.Type == FieldMappingType.Characteristic){
                                    @foreach (var attr in SimalandAttributes){
                                        <MudSelectItem Value="@($"Attr_{attr.Name}")">@attr.Name</MudSelectItem>
                                    }
                                }
                                else{
                                    @foreach (var prop in SimalandFields){
                                        <MudSelectItem Value="@prop.PropertyName">@prop.DisplayName</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudTd>
                    </MudTr>
                }
            }
        </MudSimpleTable>

        <MudDivider Class="my-6"/>
        <MudText Typo="Typo.h6">Мапинг значений характеристик</MudText>

        <MudTable Items="CharacteristicValueMappings">
            <HeaderContent>
                <MudTh>Характеристика</MudTh>
                <MudTh>Значение из SimaLand</MudTh>
                <MudTh>Значение для Wildberries</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.CharacteristicName</MudTd>
                <MudTd>
                    <MudTextField @bind-Value="context.SimalandValue" Placeholder="значение из SimaLand"/>
                </MudTd>
                <MudTd>
                    <MudTextField @bind-Value="context.WildberriesValue" Placeholder="значение для WB"/>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton OnClick="SendToBackend" Variant="Variant.Filled" Color="Color.Success" Class="mt-4">
            Создать товар в вб
        </MudButton>
    }

</MudPaper>
<style>
    .compact-field {
        padding-top: 4px !important;
        padding-bottom: 4px !important;
    }

    .compact-input .mud-input-input {
        font-size: 0.85rem;
        padding-top: 4px;
        padding-bottom: 4px;
    }

    .compact-input .mud-input-label {
        font-size: 0.75rem;
    }

    .compact-input .mud-input-control {
        min-height: 36px !important; 
        padding-top: 4px !important;
        padding-bottom: 4px !important;
    }

    .compact-input .mud-input-input {
        font-size: 0.85rem;
    }
    
    .compact-input .mud-input-label {
        font-size: 0.75rem;
    }
</style>

@code {
    private string VendorCode = string.Empty;
    private ExternalAccount? SelectedWbAccount;
    private ExternalAccount? SelectedSimaAccount;

    private List<ExternalAccount> _accounts = new();
    private bool _checkPerformed = false;
    private bool _isSearchAvailable = false;
    private string? SelectedSimalandAttribute;

    private WbCategoryDto? SelectedBaseCategory;
    private WbCategoryDto? SelectedChildCategory;

    private List<WbAdditionalCharacteristicDto> _characteristicInfos = new();
    private List<FieldMapping> Mappings = new();
    private List<SimalandAttributeDto> SimalandAttributes = new();
    private List<CharacteristicValueMapping> CharacteristicValueMappings = new();
    private WbApiResult? LastWbResult;
    private string? LastWbSummary;

    private bool CanSearch =>
        SelectedChildCategory != null &&
        SelectedWbAccount != null &&
        SelectedSimaAccount != null;

    protected override async Task OnInitializedAsync(){
        if (OperatingSystem.IsBrowser()){
            _accounts = await ProductService.LoadAccountsAsync();
            Mappings = await FieldMappingHelper.LoadFromLocalStorageAsync(JS);
        }
    }

    private async Task CheckCategoryMapping(){
        _checkPerformed = false;

        if (SelectedChildCategory == null){
            Snackbar.Add("Выберите дочернюю категорию Wildberries", Severity.Warning);
            return;
        }

        var categoryId = SelectedChildCategory.Id;

        try{
            var simalandAttrName = await Client.GetStringAsync($"api/wildberries/suggest-simaland-category?categoryId={categoryId}");
            SelectedSimalandAttribute = simalandAttrName;
            SimalandAttributes = await Client.GetFromJsonAsync<List<SimalandAttributeDto>>($"api/simaland/attributes?categoryName={SelectedSimalandAttribute}") ?? new();

            _characteristicInfos = await Client.GetFromJsonAsync<List<WbAdditionalCharacteristicDto>>(
                $"api/Wildberries/characteristics/{SelectedChildCategory.Id}/{SelectedWbAccount.Id}") ?? new();

            CharacteristicValueMappings = GenerateValueMappings(SimalandAttributes);


            FieldMappingHelper.MergeCharacteristicMappings(Mappings, _characteristicInfos);
            FieldMappingHelper.SanitizeMappings(Mappings, SimalandAttributes);

            _checkPerformed = true;
        }
        catch (Exception ex){
            Snackbar.Add($"Ошибка при получении рекомендации: {ex.Message}", Severity.Error);
        }

        _checkPerformed = true;
    }

    private async Task<IEnumerable<WbCategoryDto>> SearchBaseCategories(string value, CancellationToken token){
        var result = await Client.GetFromJsonAsync<List<WbCategoryDto>>(
            $"api/wildberries/parentCategories?query={value}", token);

        return result ?? Enumerable.Empty<WbCategoryDto>();
    }

    private async Task<IEnumerable<string>> SearchSimalandCategories(string value, CancellationToken token){
        var response = await Client.GetFromJsonAsync<List<string>>(
            $"api/simaland/search-categories?query={value}", token);

        return response ?? new();
    }


    private async Task<IEnumerable<WbCategoryDto>> SearchChildCategories(string value, CancellationToken token){
        if (SelectedBaseCategory == null)
            return Enumerable.Empty<WbCategoryDto>();

        var baseId = SelectedBaseCategory.Id;

        var result = await Client.GetFromJsonAsync<List<WbCategoryDto>>(
            $"api/wildberries/childCategories?query={value}&parentId={baseId}", token);

        return result ?? Enumerable.Empty<WbCategoryDto>();
    }

    private async Task SendToBackend(){
        if (SelectedChildCategory == null || string.IsNullOrWhiteSpace(SelectedSimalandAttribute)){
            Snackbar.Add("Выберите категории и маппинг", Severity.Warning);
            return;
        }

        var dto = new CategoryMappingRequest{
            WildberriesCategoryId = SelectedChildCategory.Id,
            SimalandCategoryName = SelectedSimalandAttribute,
            Mappings = Mappings,
            CharacteristicValueMappings = CharacteristicValueMappings
        };

        try{
            var response = await Client.PostAsJsonAsync($"api/Wildberries/createWbItem/{SelectedWbAccount.Id}", dto);

            var result = await response.Content.ReadFromJsonAsync<WbApiResult>();
            LastWbResult = result;

            if (response.IsSuccessStatusCode && result is{ Error: false }){
                LastWbSummary = "✅ Товар успешно создан";
                Snackbar.Add(LastWbSummary, Severity.Success);
            }
            else{
                LastWbSummary = $"❌ Ошибка: {result?.ErrorText ?? "Неизвестная ошибка"}";
                Snackbar.Add(LastWbSummary, Severity.Error);

                if (result?.AdditionalErrors != null){
                    foreach (var kvp in result.AdditionalErrors){
                        Snackbar.Add($"{kvp.Key}: {string.Join(", ", kvp.Value)}", Severity.Warning);
                    }
                }
            }
        }
        catch (Exception ex){
            LastWbSummary = $"❌ Ошибка при отправке: {ex.Message}";
            Snackbar.Add(LastWbSummary, Severity.Error);
        }
    }

    private List<SimalandFieldInfo> SimalandFields => typeof(SimalandProductDto)
        .GetProperties()
        .Where(p => p.PropertyType == typeof(string) || p.PropertyType.IsValueType)
        .Select(p => new SimalandFieldInfo{
            PropertyName = p.Name,
            DisplayName = p.GetCustomAttribute<DisplayAttribute>()?.Name ?? p.Name
        })
        .ToList();

    private async void OnMappingChanged(FieldMapping mapping, string newValue){
        mapping.SourceProperty = newValue == "__null__" ? "" : newValue;
        await FieldMappingHelper.SaveOrUpdateMappingsAsync(JS, Mappings);
    }

    private async Task CopyErrorToClipboard(){
        if (LastWbResult != null){
            var json = JsonSerializer.Serialize(LastWbResult, new JsonSerializerOptions{ WriteIndented = true });
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", json);
            Snackbar.Add("✅ JSON ошибки скопирован в буфер", Severity.Info);
        }
    }

    private List<CharacteristicValueMapping> GenerateValueMappings(List<SimalandAttributeDto> attributes){
        var result = new List<CharacteristicValueMapping>();

        var allowed = new HashSet<string>(StringComparer.OrdinalIgnoreCase){
            "Цвет",
            "Пол",
            "Страна производства"
        };

        foreach (var attr in attributes){
            if (string.IsNullOrWhiteSpace(attr.Name) || string.IsNullOrWhiteSpace(attr.Value))
                continue;
            
            if (!allowed.Contains(attr.Name))
                continue;

            var values = attr.Value.Split(';', StringSplitOptions.RemoveEmptyEntries)
                .Select(v => v.Trim())
                .Where(v => !string.IsNullOrWhiteSpace(v))
                .Distinct();

            foreach (var val in values){
                result.Add(new CharacteristicValueMapping{
                    CharacteristicName = attr.Name,
                    SimalandValue = val,
                    WildberriesValue = ""
                });
            }
        }

        return result;
    }

    private void OnCategorySelected(WbCategoryDto obj){
        SelectedChildCategory = obj;
        _checkPerformed = false;

        if (SelectedChildCategory == null)
            return;
    }

    private string GetGroupHeader(FieldMappingType type) => type switch{
        FieldMappingType.Text => "Основные поля",
        FieldMappingType.Dimension => "Габариты",
        FieldMappingType.Characteristic => "Характеристики",
        _ => "Прочее"
    };

}
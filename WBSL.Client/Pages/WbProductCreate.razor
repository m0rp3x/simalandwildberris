@page "/wb-product"
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using System.Text.Json
@using Shared
@using Shared.Enums
@using Shared.FieldInfos
@using WBSL.Client.Data.Helpers
@using WBSL.Client.Data.Services
@inject ISnackbar Snackbar
@inject WbProductService ProductService
@inject HttpClient Client
@inject IJSRuntime JS
<title>Создание товаров Wildberries</title>
<MudPaper Class="pa-6 mx-auto mt-8" Elevation="4">

    <MudText Typo="Typo.h5" Class="mb-4">Создание товаров Wildberries</MudText>
    @if (LastWbResult?.AdditionalErrors != null){
        <MudButton OnClick="CopyErrorToClipboard" Variant="Variant.Outlined" Color="Color.Secondary" Class="mb-2">
            Скопировать JSON ошибки
        </MudButton>

        <MudExpansionPanels>
            <MudExpansionPanel Text="Детали ошибок">
                @if (_wbResultExtended?.BatchErrors?.Any() == true){
                    @foreach (var batchErr in _wbResultExtended.BatchErrors){
                        <MudText Color="Color.Error" Class="mb-2">
                            <b>Группа @(batchErr.BatchIndex + 1) (коды: @string.Join(", ", batchErr.VendorCodes)):</b>
                            @batchErr.ErrorText
                        </MudText>

                        @if (batchErr.AdditionalErrors?.Any() == true)
                        {
                            @foreach (var kvp in batchErr.AdditionalErrors)
                            {
                                <MudText Color="Color.Warning" Class="ml-4">
                                    <b>@kvp.Key:</b> @string.Join(", ", kvp.Value)
                                </MudText>
                            }
                        }
                    }
                }
                else{
                    <MudText>Ошибок не обнаружено.</MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    }

    <MudSelect T="ExternalAccount" Label="Аккаунт Wildberries" @bind-Value="SelectedWbAccount" FullWidth>
        @foreach (var acc in _accounts.Where(x => x.Platform == ExternalAccountType.Wildberries.ToString())){
            <MudSelectItem Value="@acc">@acc.Name</MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="ExternalAccount" Label="Аккаунт SimaLand" @bind-Value="SelectedSimaAccount" FullWidth>
        @foreach (var acc in _accounts.Where(x => x.Platform == ExternalAccountType.SimaLand.ToString())){
            <MudSelectItem Value="@acc">@acc.Name</MudSelectItem>
        }
    </MudSelect>

    <MudDivider Class="my-6"/>
    <MudText Typo="Typo.h6">Выбор категории</MudText>

    <MudGrid>
        <MudItem xs="6" sm="6" md="4">
            <MudAutocomplete T="WbCategoryDto"
                             Label="Родительская категория"
                             SearchFunc="(q, t) => SearchBaseCategories(q, t)"
                             ToStringFunc="@((x) => x?.Name)"
                             @bind-Value="SelectedBaseCategory" Dense="true" Class="mt-2" MaxItems="1000"/>
        </MudItem>
        <MudItem xs="6" sm="6" md="4">
            <MudAutocomplete T="WbCategoryDto"
                             Label="Дочерняя категория"
                             SearchFunc="(q, t) => SearchChildCategories(q, t)"
                             ToStringFunc="@((x) => x?.Name ?? "")"
                             MaxItems="1000"
                             Value="SelectedChildCategory"
                             Dense="true"
                             Disabled="@(SelectedBaseCategory is null)"
                             ValueChanged="OnCategorySelected"
                             Class="mt-2"/>
        </MudItem>
    </MudGrid>

    <MudButton OnClick="CheckCategoryMapping" Disabled="@(!CanSearch)" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
        Проверить
    </MudButton>

    @if (_checkPerformed){
        <MudDivider Class="my-6"/>
        <MudText Typo="Typo.h6">Предложенная характеристика из SimaLand</MudText>

        <MudAutocomplete T="string"
                         Label="Характеристика SimaLand"
                         Value="SelectedSimalandAttribute"
                         ValueChanged="val => OnAttributeChange(val)"
                         SearchFunc="SearchSimalandCategories"
                         ToStringFunc="x => x"
                         MinCharacters="1"
                         Class="mt-2"
                         FullWidth="true"/>

        <MudDivider Class="my-6"/>
        <MudText Typo="Typo.h6">Информация о товаре</MudText>

        <MudSimpleTable>
            <MudTh>Поле Wildberries</MudTh>
            <MudTh>Источник SimaLand</MudTh>

            @foreach (var groupKey in GetGroupKeys()){
                <MudTr>
                    <MudTd ColSpan="2">
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary">
                            @GetGroupHeader(groupKey)
                        </MudText>
                    </MudTd>
                </MudTr>

                @foreach (var context in GetGroupedContexts(groupKey)){
                    <MudTr>
                        <MudTd>@context.DisplayName</MudTd>
                        <MudTd>
                            <MudSelect T="string"
                                       Value="@context.SourceProperty"
                                       ValueChanged="val => OnMappingChanged(context, val)">
                                <MudSelectItem Value="@("__null__")">– не выбрано –</MudSelectItem>
                                @if (context.Type == FieldMappingType.Characteristic){
                                    @foreach (var attr in SimalandAttributes){
                                        <MudSelectItem Value="@($"Attr_{attr.Name}")">@attr.Name</MudSelectItem>
                                    }

                                    @foreach (var prop in SimalandFields){
                                        <MudSelectItem Value="@prop.PropertyName">@prop.DisplayName</MudSelectItem>
                                    }
                                }
                                else{
                                    @foreach (var prop in SimalandFields){
                                        <MudSelectItem Value="@prop.PropertyName">@prop.DisplayName</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudTd>
                    </MudTr>
                }
            }
        </MudSimpleTable>

        <MudDivider Class="my-6"/>
        <MudText Typo="Typo.h6">Мапинг значений характеристик</MudText>

        <MudTable Items="CharacteristicValueMappings">
            <HeaderContent>
                <MudTh>Наименование характеристики на сималенде</MudTh>
                <MudTh>Значение из SimaLand</MudTh>
                <MudTh>Значение для Wildberries</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.CharacteristicName</MudTd>
                <MudTd>
                    <MudTextField @bind-Value="context.SimalandValue"
                                  ReadOnly="true"
                                  Placeholder="значение из SimaLand"/>
                </MudTd>
                <MudTd>
                    @if (IsAutocompleteSupported(context.CharacteristicName)){
                        <!-- Оставляем автокомплит для «Цвет», «Пол», «Страна производства» и т.п. -->
                        <MudAutocomplete T="string"
                                         Value="context.WildberriesValue"
                                         ValueChanged="@(val => OnAutocompleteValueChanged(val, context))"
                                         Dense="true"
                                         MinCharacters="0"
                                         Placeholder="значение для WB"
                                         SearchFunc="(q, ct) => SearchCharacteristicValues(context.CharacteristicName, q, ct)"
                                         ToStringFunc="x => x"/>
                    }
                    else{
                        var options = CharacteristicValueMappings
                            .Where(m => m.CharacteristicName == context.CharacteristicName)
                            .Select(m => m.SimalandValue.ToLowerInvariant())
                            .Distinct()
                            .ToList();
                        if (string.IsNullOrWhiteSpace(context.WildberriesValue))
                            context.WildberriesValue = GetBestMatch(options, context.SimalandValue);

                        <!-- Выпадающий список со всеми значениями из SimaLand -->
                        <MudSelect T="string"
                                   Value="context.WildberriesValue"
                                   ValueChanged="val => OnWildberriesValueChanged(val, context)"
                                   Dense="true"
                                   Placeholder="значение для WB">
                            <MudSelectItem Value="@("null")">– не выбрано –</MudSelectItem>
                            @foreach (var option in options){
                                <MudSelectItem Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>


        <MudButton OnClick="SendToBackend" Variant="Variant.Filled" Color="Color.Success" Class="mt-4">
            Создать товар в вб
        </MudButton>
    }

</MudPaper>
<style>
    .compact-field {
        padding-top: 4px !important;
        padding-bottom: 4px !important;
    }

    .compact-input .mud-input-input {
        font-size: 0.85rem;
        padding-top: 4px;
        padding-bottom: 4px;
    }

    .compact-input .mud-input-label {
        font-size: 0.75rem;
    }

    .compact-input .mud-input-control {
        min-height: 36px !important; 
        padding-top: 4px !important;
        padding-bottom: 4px !important;
    }

    .compact-input .mud-input-input {
        font-size: 0.85rem;
    }
    
    .compact-input .mud-input-label {
        font-size: 0.75rem;
    }
</style>

@code {
    private ExternalAccount? SelectedWbAccount;
    private ExternalAccount? SelectedSimaAccount;

    private List<ExternalAccount> _accounts = new();
    private bool _checkPerformed = false;
    private bool _isSearchAvailable = false;
    private string? SelectedSimalandAttribute;

    private WbCategoryDto? SelectedBaseCategory;
    private WbCategoryDto? SelectedChildCategory;

    private List<WbAdditionalCharacteristicDto> _characteristicInfos = new();
    private List<FieldMapping> Mappings = new();
    private List<SimalandAttributeDto> SimalandAttributes = new();
    private List<CharacteristicValueMapping> CharacteristicValueMappings = new();
    private WbApiResult? LastWbResult;
    private WbCreateApiExtendedResult? _wbResultExtended;
    private string? LastWbSummary;
    private string? _lastWbRawJson;

    private static readonly HashSet<string> _autocompleteFields = new(){
        "Цвет",
        "Пол",
        "Для кого",
        "Страна производства"
    };

    private bool CanSearch =>
        SelectedChildCategory != null &&
        SelectedWbAccount != null &&
        SelectedSimaAccount != null;

    private bool IsAutocompleteSupported(string name){
        if (name.StartsWith("Цвет", StringComparison.OrdinalIgnoreCase))
            return true;
        return _autocompleteFields.Contains(name, StringComparer.OrdinalIgnoreCase);
    }

    string BuildQuery(params (string key, string? value)[] parameters) =>
        string.Join("&", parameters.Select(p => $"{p.key}={Uri.EscapeDataString(p.value ?? string.Empty)}"));

    protected override async Task OnInitializedAsync(){
        if (OperatingSystem.IsBrowser()){
            _accounts = await ProductService.LoadAccountsAsync();
        }
    }

    private string MapCharacteristicName(string name){
        if (name.StartsWith("Цвет", StringComparison.OrdinalIgnoreCase))
            return "Цвет";
        if (string.Equals(name, "Для кого", StringComparison.OrdinalIgnoreCase))
            return "Пол";
        return name;
    }

    private async Task CheckCategoryMapping(){
        _checkPerformed = false;

        if (SelectedChildCategory == null){
            Snackbar.Add("Выберите дочернюю категорию Wildberries", Severity.Warning);
            return;
        }

        var categoryId = SelectedChildCategory.Id;

        try{
            Mappings = await FieldMappingHelper.LoadFromLocalStorageAsync(JS);

            if (string.IsNullOrEmpty(SelectedSimalandAttribute)){
                var simalandAttrName = await Client.GetStringAsync($"api/wildberries/suggest-simaland-category?categoryId={categoryId}");

                SelectedSimalandAttribute = simalandAttrName;
            }

            var response = await Client.GetAsync($"api/simaland/attributes?categoryName={SelectedSimalandAttribute}");
            if (response.IsSuccessStatusCode){
                SimalandAttributes = await response.Content.ReadFromJsonAsync<List<SimalandAttributeDto>>() ?? new();
            }
            else{
                Snackbar.Add("Характеристики с SimaLand не найдены, выберите вручную", Severity.Warning);
            }

            _characteristicInfos = await Client.GetFromJsonAsync<List<WbAdditionalCharacteristicDto>>(
                $"api/Wildberries/characteristics/{SelectedChildCategory.Id}/{SelectedWbAccount.Id}") ?? new();

            CharacteristicValueMappings = GenerateValueMappings(SimalandAttributes);

            var savedCharacteristicMappings = await CharacteristicMappingHelper.LoadFromLocalStorageAsync(JS);
            CharacteristicMappingHelper.MergeWithSavedMappings(CharacteristicValueMappings, savedCharacteristicMappings);

            FieldMappingHelper.MergeCharacteristicMappings(Mappings, _characteristicInfos);
            FieldMappingHelper.SanitizeMappings(Mappings, SimalandAttributes);

            CharacteristicValueMappings.Sort((a, b) =>
                string.Compare(a.CharacteristicName, b.CharacteristicName, StringComparison.OrdinalIgnoreCase));
            _checkPerformed = true;
        }
        catch (Exception ex){
            Snackbar.Add($"Ошибка при получении рекомендации: {ex.Message}", Severity.Error);
        }

        _checkPerformed = true;
    }

    private async Task<IEnumerable<WbCategoryDto>> SearchBaseCategories(string? value, CancellationToken token){
        var query = BuildQuery(("query", value));
        var url = $"api/wildberries/parentCategories?{query}";

        var result = await Client.GetFromJsonAsync<List<WbCategoryDto>>(url, token);
        return result ?? Enumerable.Empty<WbCategoryDto>();
    }

    private async Task<IEnumerable<string>> SearchSimalandCategories(string? value, CancellationToken token){
        var query = BuildQuery(("query", value));
        var url = $"api/simaland/search-categories?{query}";
        var response = await Client.GetFromJsonAsync<List<string>>(
            url, token);

        return response ?? new();
    }


    private async Task<IEnumerable<WbCategoryDto>> SearchChildCategories(string value, CancellationToken token){
        if (SelectedBaseCategory == null)
            return Enumerable.Empty<WbCategoryDto>();

        var baseId = SelectedBaseCategory.Id;
        var query = BuildQuery(("query", value), ("parentId", baseId.ToString()));
        var url = $"api/wildberries/childCategories?{query}";

        var result = await Client.GetFromJsonAsync<List<WbCategoryDto>>(
            url, token);

        return result ?? Enumerable.Empty<WbCategoryDto>();
    }

    private async Task SendToBackend(){
        if (SelectedChildCategory == null || string.IsNullOrWhiteSpace(SelectedSimalandAttribute)){
            Snackbar.Add("Выберите категории и маппинг", Severity.Warning);
            return;
        }

        var cleanedCharacteristicValueMappings = CharacteristicValueMappings
            .Select(m => new CharacteristicValueMapping{
                CharacteristicName = m.CharacteristicName,
                SimalandValue = m.SimalandValue,
                WildberriesValue = m.WildberriesValue == "null" ? string.Empty : m.WildberriesValue
            })
            .ToList();
        var dto = new CategoryMappingRequest{
            WildberriesCategoryId = SelectedChildCategory.Id,
            SimalandCategoryName = SelectedSimalandAttribute,
            Mappings = Mappings,
            CharacteristicValueMappings = cleanedCharacteristicValueMappings
        };

        try{
            var response = await Client.PostAsJsonAsync($"api/Wildberries/createWbItem/{SelectedWbAccount.Id}", dto);

            var extendedResult = await response.Content.ReadFromJsonAsync<WbCreateApiExtendedResult>();

            _lastWbRawJson = await response.Content.ReadAsStringAsync();

            _wbResultExtended = extendedResult;
            LastWbResult = extendedResult?.Result;

            if (response.IsSuccessStatusCode && LastWbResult is{ Error: false }){
                var successfulCount = extendedResult?.SuccessfulVendorCodes?.Count ?? 0;
                LastWbSummary = $"✅ Успешно создано товаров: {successfulCount}";
                Snackbar.Add(LastWbSummary, Severity.Success);
            }
            else{
                var successCount = extendedResult?.SuccessfulVendorCodes?.Count ?? 0;
                if (successCount > 0){
                    Snackbar.Add($"✅ Успешно создано товаров: {successCount}", Severity.Success);
                }

                var globalText = LastWbResult?.ErrorText ?? "Неизвестная ошибка";
                LastWbSummary = $"❌ Ошибка при создании WB-товаров: {globalText}";
                Snackbar.Add(LastWbSummary, Severity.Error);

                if (extendedResult?.BatchErrors?.Count > 0){
                    foreach (var batchErr in extendedResult.BatchErrors){
                        // 5.1 — основной текст для этой группы
                        var codes = string.Join(", ", batchErr.VendorCodes);
                        var msg = $"Группа #{batchErr.BatchIndex + 1} ({codes}): {batchErr.ErrorText}";
                        Snackbar.Add(msg, Severity.Warning);

                        // 5.2 — если в батче есть детальные AdditionalErrors, показываем их
                        if (batchErr.AdditionalErrors?.Count > 0){
                            // склеиваем все per-vendor сообщения через "; "
                            var details = string.Join("; ",
                                batchErr.AdditionalErrors
                                    .SelectMany(kvp => kvp.Value)
                                    .Distinct()
                            );
                            Snackbar.Add($"   Детали: {details}", Severity.Info);
                        }
                    }
                }

                if (LastWbResult?.AdditionalErrors?.Count > 0){
                    foreach (var kvp in LastWbResult.AdditionalErrors){
                        Snackbar.Add($"{kvp.Key}: {string.Join(", ", kvp.Value)}", Severity.Warning);
                    }
                }
            }
        }
        catch (Exception ex){
            LastWbSummary = $"❌ Ошибка при отправке: {ex.Message}";
            Snackbar.Add(LastWbSummary, Severity.Error);
        }
    }

    private List<SimalandFieldInfo> SimalandFields => typeof(SimalandProductDto)
        .GetProperties()
        .Where(p =>
            (p.PropertyType == typeof(string) || p.PropertyType.IsValueType) &&
            p.GetCustomAttribute<DisplayAttribute>() != null)
        .Select(p => new SimalandFieldInfo{
            PropertyName = p.Name,
            DisplayName = p.GetCustomAttribute<DisplayAttribute>()?.Name ?? p.Name
        })
        .ToList();

    private async void OnMappingChanged(FieldMapping mapping, string newValue){
        mapping.SourceProperty = newValue == "__null__" ? "" : newValue;
        await FieldMappingHelper.SaveOrUpdateMappingsAsync(JS, Mappings);
    }

    private async Task CopyErrorToClipboard(){
        if (string.IsNullOrEmpty(_lastWbRawJson)){
            Snackbar.Add("ℹ️ Нет JSON для копирования", Severity.Info);
            return;
        }

        try{
            await JS.InvokeVoidAsync("copyTextToClipboard", _lastWbRawJson);
            Snackbar.Add("✅ JSON ошибки скопирован в буфер", Severity.Success);
        }
        catch (JSException jsEx){
            Snackbar.Add("❌ Не удалось скопировать: " + jsEx.Message, Severity.Error);
        }
        catch (Exception ex){
            Snackbar.Add("❌ Ошибка при копировании в буфер", Severity.Error);
        }
    }

    bool IsNumeric(string input){
        return double.TryParse(input, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out _);
    }

    private List<CharacteristicValueMapping> GenerateValueMappings(List<SimalandAttributeDto> attributes){
        var result = new List<CharacteristicValueMapping>();

        foreach (var attr in attributes){
            if (string.IsNullOrWhiteSpace(attr.Name) || string.IsNullOrWhiteSpace(attr.Value))
                continue;

            if (!_autocompleteFields.Contains(attr.Name)){
                var values2 = attr.Value.Split(';', StringSplitOptions.RemoveEmptyEntries)
                    .Select(v => v.Trim())
                    .Where(v => !string.IsNullOrWhiteSpace(v))
                    .Distinct();

                foreach (var val in values2){
                    if (IsNumeric(val))
                        continue;

                    result.Add(new CharacteristicValueMapping{
                        CharacteristicName = attr.Name,
                        SimalandValue = val,
                        WildberriesValue = ""
                    });
                }

                continue;
            }

            var values = attr.Value.Split(';', StringSplitOptions.RemoveEmptyEntries)
                .Select(v => v.Trim())
                .Where(v => !string.IsNullOrWhiteSpace(v))
                .Distinct();

            foreach (var val in values){
                result.Add(new CharacteristicValueMapping{
                    CharacteristicName = attr.Name,
                    SimalandValue = val,
                    WildberriesValue = ""
                });
            }
        }

        return result;
    }

    private void OnCategorySelected(WbCategoryDto obj){
        SelectedChildCategory = obj;
        _checkPerformed = false;

        if (SelectedChildCategory == null)
            return;
    }

    private async Task OnAutocompleteValueChanged(string newValue, CharacteristicValueMapping context){
        context.WildberriesValue = newValue;

        var mapping = new CharacteristicValueMapping{
            CharacteristicName = context.CharacteristicName,
            SimalandValue = context.SimalandValue,
            WildberriesValue = newValue
        };

        await CharacteristicMappingHelper.UpsertMappingAsync(JS, mapping);
    }

    private async Task<IEnumerable<string>> SearchCharacteristicValues(
        string characteristicName,
        string query,
        CancellationToken token){
        try{
            var mappedName = MapCharacteristicName(characteristicName) ?? string.Empty;
            var encodedName = Uri.EscapeDataString(mappedName);

            var safeQuery = query ?? string.Empty;
            var encodedQuery = Uri.EscapeDataString(safeQuery);
            if (encodedQuery == null){
                encodedQuery = string.Empty;
            }

            var accountId = SelectedWbAccount.Id;

            var url = $"api/Wildberries/char-values?name={encodedName}&query={encodedQuery}&accountId={accountId}";
            var response = await Client.GetFromJsonAsync<List<string>>(url, token);

            return response ?? Enumerable.Empty<string>();
        }
        catch (Exception e){
            return Enumerable.Empty<string>();
        }
    }

    private string GetGroupHeader(string key){
        return key switch{
            "Characteristic" => "Характеристики",
            "Text" => "Основные поля",
            "Dimension" => "Габариты",
            _ => key
        };
    }

    private string GetGroupHeader(FieldMappingType type) => type switch{
        FieldMappingType.Text => "Основные поля",
        FieldMappingType.Dimension => "Габариты",
        FieldMappingType.Characteristic => "Характеристики",
        _ => "Прочее"
    };

    private async Task OnAttributeChange(string val){
        SelectedSimalandAttribute = val;
        await CheckCategoryMapping();
    }

    private List<string> GetGroupKeys(){
        var keys = new List<string>();
        if (Mappings.Any(m => m.Type == FieldMappingType.Text))
            keys.Add("Text");
        if (Mappings.Any(m => m.Type == FieldMappingType.Dimension))
            keys.Add("Dimension");
        if (Mappings.Any(m => m.Type == FieldMappingType.Characteristic))
            keys.Add("Characteristic");
        return keys;
    }

    private IEnumerable<FieldMapping> GetGroupedContexts(string groupKey){
        return groupKey switch{
            "Characteristic" => Mappings.Where(m => m.Type == FieldMappingType.Characteristic).OrderBy(x => x.DisplayName),
            "Text" => Mappings.Where(m => m.Type == FieldMappingType.Text),
            "Dimension" => Mappings.Where(m => m.Type == FieldMappingType.Dimension),
            _ => Enumerable.Empty<FieldMapping>()
        };
    }

    private async Task OnWildberriesValueChanged(string newValue, CharacteristicValueMapping context){
        context.WildberriesValue = newValue;
    }

    private string GetBestMatch(IEnumerable<string> options, string? source){
        if (string.IsNullOrWhiteSpace(source))
            return options.FirstOrDefault() ?? string.Empty;

        var lowerSrc = source.Trim().ToLowerInvariant();

        // 1) точное совпадение
        var exact = options.FirstOrDefault(o =>
            o.Equals(lowerSrc, StringComparison.OrdinalIgnoreCase));
        if (exact != null) return exact;

        // 2) вхождение
        var contains = options.FirstOrDefault(o =>
            lowerSrc.Contains(o) || o.Contains(lowerSrc));
        if (contains != null) return contains;

        // 3) fallback
        return options.FirstOrDefault() ?? string.Empty;
    }

}
@page "/excel-update"
@using System.Data
@using ExcelDataReader
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS

<MudPaper Class="p-6 mx-auto mt-4" MaxWidth="900px" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">Обновление наименований товаров</MudText>

    <MudStack Spacing="2">
        <InputFile OnChange="HandleFile" />
        
        @if (!string.IsNullOrWhiteSpace(status))
        {
            <MudText Typo="Typo.subtitle1" Color="@((status.StartsWith("❌") || status.StartsWith("⚠️")) ? Color.Error : Color.Success)">
                @status
            </MudText>
        }

        @if (updates?.Count > 0)
        {
            <MudDivider Class="my-2" />
            <MudText Typo="Typo.subtitle2">Найдено @updates.Count товаров для обновления:</MudText>
            <div style="max-height: 400px; overflow-y: auto;">
                <MudTable ServerData="LoadServerData"
                          RowsPerPage="50"
                          Bordered="true"
                          Hover="true"
                          Dense="true"
                          Class="mt-2">

                    <HeaderContent>
                        <MudTh>Артикул</MudTh>
                        <MudTh>Наименование</MudTh>
                        <MudTh>Мин. заказ</MudTh>
                        <MudTh>Ед. изм.</MudTh>
                        <MudTh>Описание</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="Артикул">@context.Sid</MudTd>
                        <MudTd DataLabel="Наименование">@context.Name</MudTd>
                        <MudTd DataLabel="Мин. заказ">@context.QtyMultiplier</MudTd>
                        <MudTd DataLabel="Ед. изм.">@context.UnitName</MudTd>
                        <MudTd DataLabel="Описание">@context.Description</MudTd>
                    </RowTemplate>
                </MudTable>


            </div>


            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendUpdates" Class="mt-4">
                ✅ Отправить в Базу
            </MudButton>
        }

        <MudDivider Class="my-4" />

        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DownloadExcel">
            📥 Скачать всю базу в Excel
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    private string status = "";
    private List<ProductNameUpdateDto> updates = new();
    
    private Task<TableData<ProductNameUpdateDto>> LoadServerData(TableState state, CancellationToken token)
    {
        var data = updates
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return Task.FromResult(new TableData<ProductNameUpdateDto>
        {
            Items = data,
            TotalItems = updates.Count
        });
    }


    
private async Task HandleFile(InputFileChangeEventArgs e)
{
    updates.Clear();
    status = "";

    try
    {
        var file = e.File;
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        using var input = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024); // 100 MB

        using var memoryStream = new MemoryStream();
        await input.CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        using var reader = ExcelReaderFactory.CreateReader(memoryStream);
        var result = reader.AsDataSet(new ExcelDataSetConfiguration
        {
            ConfigureDataTable = _ => new ExcelDataTableConfiguration
            {
                UseHeaderRow = true
            }
        });

        var table = result.Tables[0];

        if (!table.Columns.Contains("Артикул") || !table.Columns.Contains("Наименование"))
        {
            var allColumns = string.Join(", ", table.Columns.Cast<DataColumn>().Select(c => $"'{c.ColumnName}'"));
            status = $"❌ В Excel-файле не найдены колонки 'Артикул' и/или 'Наименование'. Найдены: {allColumns}";
            return;
        }

        int sidIndex = table.Columns["Артикул"].Ordinal;
        int nameIndex = table.Columns["Наименование"].Ordinal;
        int qtyIndex = table.Columns.Contains("Минимальная партия") 
            ? table.Columns["Минимальная партия"].Ordinal 
            : -1;
        int unitIndex = table.Columns.Contains("Единица Измеренения")
            ? table.Columns["Единица Измеренения"].Ordinal
            : -1;
        int descIndex = table.Columns.Contains("Описание")
            ? table.Columns["Описание"].Ordinal
            : -1;

        for (int i = 0; i < table.Rows.Count; i++)
        {
            var sidRaw = table.Rows[i][sidIndex]?.ToString()?.Trim();
            var nameRaw = table.Rows[i][nameIndex]?.ToString()?.Trim();

            if (!long.TryParse(sidRaw, out var sid) || string.IsNullOrWhiteSpace(nameRaw))
                continue;

            int? qty = null;
            if (qtyIndex != -1)
            {
                var qtyRaw = table.Rows[i][qtyIndex]?.ToString()?.Trim();
                if (int.TryParse(qtyRaw, out var parsedQty))
                    qty = parsedQty;
            }

            string? unit = null;
            if (unitIndex != -1)
                unit = table.Rows[i][unitIndex]?.ToString()?.Trim();

            string? description = null;
            if (descIndex != -1)
                description = table.Rows[i][descIndex]?.ToString()?.Trim();

            updates.Add(new ProductNameUpdateDto
            {
                Sid = sid,
                Name = nameRaw,
                QtyMultiplier = qty,
                UnitName = unit,
                Description = description // 👈 добавлено
            });
        }

        status = updates.Count == 0
            ? "⚠️ Не найдено ни одной валидной строки."
            : $"✅ Найдено строк: {updates.Count}";
    }
    catch (Exception ex)
    {
        status = $"❌ Ошибка: {ex.Message}";
    }
}



private async Task SendUpdates()
{
    try
    {
        var response = await Http.PostAsJsonAsync("api/excelupdate/update-names", updates);

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            try
            {
                using var doc = JsonDocument.Parse(json);

                if (doc.RootElement.TryGetProperty("updatedSids", out var sidsElement) && sidsElement.ValueKind == JsonValueKind.Array)
                {
                    var updatedSids = sidsElement.EnumerateArray().Select(x => x.GetInt64()).ToHashSet();

                    if (updates != null)
                    {
                        updates = updates.Where(x => updatedSids.Contains(x.Sid)).ToList();
                    }

                    status = $"✅ Обновлено товаров: {updatedSids.Count}";
                }
                else
                {
                    status = $"⚠️ Ответ сервера не содержит список 'updatedSids'. Ответ: {json}";
                }
            }
            catch (Exception parseEx)
            {
                status = $"❌ Не удалось разобрать JSON: {parseEx.Message}. Ответ сервера: {json}";
            }
        }
        else
        {
            status = $"❌ Ошибка от сервера: {(int)response.StatusCode} {response.StatusCode}";
        }
    }
    catch (Exception ex)
    {
        status = $"❌ Ошибка отправки: {ex.Message}";
    }
}



    private async Task DownloadExcel()
    {
        try
        {
            var url = "api/excelupdate/export";
            var fileName = $"products_{DateTime.Now:yyyyMMddHHmmss}.xlsx";

            using var stream = await Http.GetStreamAsync(url);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();

            await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(bytes));
        }
        catch (Exception ex)
        {
            status = $"❌ Ошибка при скачивании: {ex.Message}";
        }
    }

    public class ProductNameUpdateDto
    {
        public long Sid { get; set; }
        public string Name { get; set; } = string.Empty;
        public int? QtyMultiplier { get; set; } // 👈 добавлено
        public string? UnitName { get; set; } // 👈 добавлено
        public string? Description { get; set; } // 👈 добавлено

    }

}

@page "/price-calculator-settings"
@using Shared
@using Shared.Enums

@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Настройки Калькулятора Цен</PageTitle>

<MudPaper Class="pa-6 mx-auto mt-8" Style="max-width:1080px;" Elevation="4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5">⚙️ Настройки калькулятора цен</MudText>

        <MudSelect T="ExternalAccount"
                   @bind-Value="_selectedAccount"
                   Label="Выберите аккаунт"
                   Variant="Variant.Outlined"
                   FullWidth>
            @foreach (var acct in _accounts){
                <MudSelectItem Value="@acct">@acct.Name</MudSelectItem>     
            }
        </MudSelect>

        <MudForm @ref="_form" OnValidSubmit="SaveSettings">
            <MudGrid Class="mt-4">
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Settings.HandlingCost"
                                  Label="Стоимость обработки"
                                  Variant="Variant.Filled"
                                  Immediate="true"
                                  For="@(() => Settings.HandlingCost)"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Settings.PackagingCost"
                                  Label="Стоимость упаковки"
                                  Variant="Variant.Filled"
                                  Immediate="true"
                                  For="@(() => Settings.PackagingCost)"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Settings.SalaryCost"
                                  Label="Стоимость зарплаты"
                                  Variant="Variant.Filled"
                                  Immediate="true"
                                  For="@(() => Settings.SalaryCost)"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Settings.MarginPercent"
                                  Label="Маржа (%)"
                                  Variant="Variant.Filled"
                                  Immediate="true"
                                  For="@(() => Settings.MarginPercent)"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Settings.RedemptionLossPercent"
                                  Label="Процент невыкупа (%)"
                                  Variant="Variant.Filled"
                                  Immediate="true"
                                  For="@(() => Settings.RedemptionLossPercent)"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Settings.PlannedDiscountPercent"
                                  Label="Планируемая скидка (%)"
                                  Variant="Variant.Filled"
                                  Immediate="true"
                                  For="@(() => Settings.PlannedDiscountPercent)"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudCheckBox T="bool" @bind-Value="Settings.IsMinimal"
                                 Label="Минимальное количество"
                                 Variant="Variant.Filled" />
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            <MudButton OnClick="Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="_selectedAccount == null">
                Сохранить
            </MudButton>
        </MudForm>
    </MudStack>
</MudPaper>

@code {
    private MudForm _form;
    private PriceCalculatorSettingsDto Settings = new();
    private ExternalAccount? _selectedAccount;
    private List<ExternalAccount> _accounts = new();
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender && !_initialized){
            _initialized = true;
            await LoadAccounts();
            StateHasChanged();
        }
    }
    private async Task Submit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            await SaveSettings();
        }
    }
    private async Task LoadAccounts(){
        var accounts = await Http.GetFromJsonAsync<List<ExternalAccount>>("api/accounts") ?? new List<ExternalAccount>();
        _accounts = accounts.Where(x=>x.Platform == ExternalAccountType.Wildberries.ToString()).ToList();
    }

    private async Task SaveSettings(){
        if (_selectedAccount == null){
            Snackbar.Add("Выберите аккаунт перед сохранением.", Severity.Warning);
            return;
        }
        
        var response = await Http.PostAsJsonAsync(
            $"api/wildberries/updateWbPrices/{_selectedAccount.Id}",
            Settings
        );
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Ошибка при обновлении цен: {response.StatusCode}", Severity.Error);
            return;
        }
        
        var resultDto = await response.Content
            .ReadFromJsonAsync<PricePushResult>();

        if (resultDto == null)
        {
            Snackbar.Add("Не удалось разобрать ответ от сервера.", Severity.Error);
            return;
        }

        // Показываем, сколько цен успешно отправлено
        Snackbar.Add(
            $"Успешно обновлено цен: {resultDto.UploadedCount}.",
            Severity.Success
        );

        // И для каждого товара с ошибкой расчёта — отдельное сообщение
        if (resultDto.CalculationErrors.Any())
        {
            foreach (var err in resultDto.CalculationErrors)
            {
                Snackbar.Add(
                    $"Ошибка расчёта для товара {err.NmId}: {err.ErrorMessage}",
                    Severity.Warning
                );
            }
        }
    }

}
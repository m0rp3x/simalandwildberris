@page "/wb-product"
@using System.Text.Json
@using Shared
@using Shared.Enums
@using WBSL.Client.Data.DTO
@using WBSL.Client.Data.Services
@using WbAdditionalCharacteristicDto = Shared.WbAdditionalCharacteristicDto
@using WbCharacteristicDto = Shared.WbCharacteristicDto
@inject HttpClient Client
@inject ISnackbar Snackbar
@inject ProductMappingService MappingService

<MudPaper Class="pa-6 mx-auto mt-8" Style="max-width: 800px;" Elevation="4">
    <MudText Typo="Typo.h5" Class="mb-4">Поиск товара Wildberries</MudText>

    <MudTextField @bind-Value="VendorCode" Label="Артикул товара"
                  Variant="Variant.Outlined" FullWidth Class="mb-4"/>

    <MudSelect T="ExternalAccount" @bind-Value="SelectedWbAccount" Label="Выберите аккаунт WB" Variant="Variant.Outlined" FullWidth>
        @foreach (var account in _accounts.Where(x => x.Platform == ExternalAccountType.Wildberries.ToString())){
            <MudSelectItem Value="@account">@account.Name</MudSelectItem>
        }
    </MudSelect>
    <MudSelect T="ExternalAccount" @bind-Value="SelectedSimaAccount" Label="Выберите аккаунт SimaLand" Variant="Variant.Outlined" FullWidth>
        @foreach (var account in _accounts.Where(x => x.Platform == ExternalAccountType.SimaLand.ToString())){
            <MudSelectItem Value="@account">@account.Name</MudSelectItem>
        }
    </MudSelect>
    <MudButton OnClick="SearchProduct" Variant="Variant.Filled"
               Color="Color.Primary" FullWidth Disabled="@(IsLoading && !isSearchAvailable)">
        @(IsLoading ? "Поиск..." : "Найти товар")
    </MudButton>

    @if (Product != null){
        <MudPaper Class="mt-6 pa-4" Elevation="2">
            <MudText Typo="Typo.h6">@Product.Title</MudText>
            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@Product.Brand</MudText>

            <MudGrid Class="mt-4">
                <MudItem xs="12" sm="6">
                    <MudCarousel TData="object" Style="height: 200px; width: 100%;" AutoCycle="false">
                        @foreach (var photo in Product.Photos){
                            <MudCarouselItem>
                                <div class="d-flex justify-center align-center" style="height: 100%;">
                                    <MudImage Src="@photo.Big" Style="max-height: 100%; max-width: 100%; object-fit: contain;"/>
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </MudItem>
                <MudItem xs="12" sm="6" Class="pl-4">
                    <MudText Typo="Typo.body1">Артикул: @Product.VendorCode</MudText>
                    <MudText Typo="Typo.body1">Категория: @Product.SubjectName</MudText>

                    <MudList T="WbCharacteristicDto" Class="mt-2">
                        @foreach (var charact in Product.Characteristics.Take(5)){
                            <MudListItem>
                                <MudText>@charact.Name: @GetCharacteristicValue(charact)</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudPaper Class="mt-6 pa-4" Elevation="2">
            <MudText Typo="Typo.h6" Class="mb-4">Сопоставление характеристик товара</MudText>

            <MudTable Items="@mappings" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Параметр</MudTh>
                    <MudTh>Значение WB</MudTh>
                    <MudTh>Поле SimaLand</MudTh>
                    <MudTh>Значение SimaLand</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Параметр">@context.PropertyName</MudTd>
                    <MudTd DataLabel="WB">@context.WbValue</MudTd>
                    <MudTd DataLabel="SimaLand">
                        @if (context.IsSelectable){
                            <MudSelect T="string" Value="@context.SimaLandFieldName"
                                       ValueChanged="@(v => OnSimaLandValueChanged(v, context))">
                                <MudSelectItem Value="@string.Empty">Не выбрано</MudSelectItem>
                                @foreach (var opt in GetSimaLandOptions()){
                                    <MudSelectItem Value="@opt">@opt</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else{
                            <MudText>@context.SimaLandFieldName</MudText>
                        }
                    </MudTd>
                    <MudTd>
                        @context.SimaLandValue
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudPaper>

@code {
    private string VendorCode = string.Empty;
    private ExternalAccount? _selectedWbAccount;
    private ExternalAccount? _selectedSimaAccount;

    public ExternalAccount? SelectedWbAccount{
        get => _selectedWbAccount;
        set{
            _selectedWbAccount = value;
            isSearchAvailable = _selectedWbAccount != null && _selectedSimaAccount != null;
            StateHasChanged();
        }
    }

    public ExternalAccount? SelectedSimaAccount{
        get => _selectedSimaAccount;
        set{
            _selectedSimaAccount = value;
            isSearchAvailable = _selectedWbAccount != null && _selectedSimaAccount != null;
            StateHasChanged();
        }
    }

    private List<ExternalAccount> _accounts = new();
    private WbProductCardDto Product;
    WbItemApiResponse curResponse;
    private List<WbAdditionalCharacteristicDto>? characteristicDto;
    private List<PropertyMapping> mappings;
    private bool IsLoading = true;
    private bool isSearchAvailable = false;


    protected override async Task OnInitializedAsync(){
        await LoadAccounts();
    }

    private async Task LoadAccounts(){
        _accounts = await Client.GetFromJsonAsync<List<ExternalAccount>>("api/accounts") ?? new List<ExternalAccount>();
    }

    private async Task SearchProduct(){
        if (string.IsNullOrWhiteSpace(VendorCode)){
            Snackbar.Add("Введите артикул товара", Severity.Warning);
            return;
        }

        IsLoading = true;
        Product = null;
        Snackbar.Add("Ищем товар...", Severity.Info);

        try{
            var response = await Client.GetFromJsonAsync<WbItemApiResponse>($"api/Wildberries/wbItem/{VendorCode}/{_selectedSimaAccount.Id}/{_selectedWbAccount.Id}");

            if (response is null){
                throw new Exception("Товар не найден");
            }

            curResponse = response;
            Product = response.wbProduct.Product;
            characteristicDto = response.wbProduct.AdditionalCharacteristics;
            mappings = MappingService.GenerateMappings(wbProduct: Product, simaProduct: response.SimalandProducts?.First());
            if (response.SimalandProducts?.Any() == true){
                var sima = response.SimalandProducts.First();

                foreach (var mapping in mappings.Where(m => m.IsSelectable)){
                    if (!string.IsNullOrEmpty(mapping.SimaLandFieldName)){
                        var simaProp = sima.GetType().GetProperty(mapping.SimaLandFieldName);
                        if (simaProp != null){
                            var value = simaProp.GetValue(sima);
                            mapping.SimaLandValue = value?.ToString() ?? "";
                        }
                    }
                }
            }

            Snackbar.Add("Товар найден!", Severity.Success);
        }
        catch (Exception ex){
            Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
            Product = null;
        }
        finally{
            IsLoading = false;
        }
    }

    private string GetCharacteristicValue(WbCharacteristicDto charact){
        if (charact.Value is JsonElement element){
            return element.ValueKind switch{
                JsonValueKind.String => element.GetString(),
                JsonValueKind.Number => element.GetDouble().ToString(),
                JsonValueKind.Array => string.Join(", ", element.EnumerateArray().Select(x => x.ToString())),
                _ => charact.Value?.ToString() ?? "N/A"
            };
        }

        return charact.Value?.ToString() ?? "N/A";
    }

    private void OnSimaLandValueChanged(string value, PropertyMapping context){
        context.SimaLandFieldName = value;

        var sima = curResponse?.SimalandProducts?.FirstOrDefault();
        if (sima == null) return;

        // Сначала пробуем стандартные поля
        var prop = typeof(SimalandProductDto).GetProperty(value);
        if (prop != null){
            var val = prop.GetValue(sima);
            context.SimaLandValue = val?.ToString() ?? "";
            context.IsFromAttribute = false;
            return;
        }

        // Иначе ищем по атрибутам
        var attr = sima.Attributes.FirstOrDefault(a => a.attr_name == value);
        if (attr != null){
            context.SimaLandValue = attr.value_text;
            context.IsFromAttribute = true;
        }

        StateHasChanged();
    }

    public WbProductCardDto BuildUpdatedWbProduct(WbProductCardDto original){
        var updated = JsonSerializer.Deserialize<WbProductCardDto>(
            JsonSerializer.Serialize(original)); // Клонируем объект

        foreach (var map in mappings){
            if (!string.IsNullOrWhiteSpace(map.SimaLandValue) && !string.IsNullOrWhiteSpace(map.WbFieldName)){
                SetPropertyValue(updated, map.WbFieldName, map.SimaLandValue);
            }
        }

        return updated!;
    }

    private void SetPropertyValue(object target, string propertyPath, string value){
        var parts = propertyPath.Split('.');

        for (int i = 0; i < parts.Length - 1; i++){
            var prop = target.GetType().GetProperty(parts[i]);
            if (prop == null) return;
            target = prop.GetValue(target) ?? throw new Exception($"Null for intermediate path {parts[i]}");
        }

        var finalProp = target.GetType().GetProperty(parts.Last());
        if (finalProp == null || !finalProp.CanWrite) return;

        object convertedValue = Convert.ChangeType(value, Nullable.GetUnderlyingType(finalProp.PropertyType) ?? finalProp.PropertyType);
        finalProp.SetValue(target, convertedValue);
    }

    private List<string> GetSimaLandOptions(){
        var sima = curResponse?.SimalandProducts?.FirstOrDefault();
        var standardProps = typeof(SimalandProductDto)
            .GetProperties()
            .Select(p => p.Name);

        var attributes = sima?.Attributes?.Select(a => a.attr_name) ?? Enumerable.Empty<string>();

        return standardProps.Concat(attributes).Distinct().OrderBy(x => x).ToList();
    }

}